// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gabriel/protocol/server/default.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gabriel/protocol/server/default.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gabriel {
namespace protocol {
namespace server {

namespace {

const ::google::protobuf::Descriptor* Server_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_Ordinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_Ordinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_Ordinary_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_Ordinary_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_Center_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_Center_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_Center_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_Center_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center_Addr_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center_Addr_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Center_Addr_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Center_Addr_Rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DEFAULT_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto() {
  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gabriel/protocol/server/default.proto");
  GOOGLE_CHECK(file != NULL);
  Server_Info_descriptor_ = file->message_type(0);
  static const int Server_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, inner_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, outer_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, port_),
  };
  Server_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_Info_descriptor_,
      Server_Info::default_instance_,
      Server_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server_Info));
  Register_Ordinary_descriptor_ = file->message_type(1);
  static const int Register_Ordinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary, server_id_),
  };
  Register_Ordinary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_Ordinary_descriptor_,
      Register_Ordinary::default_instance_,
      Register_Ordinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register_Ordinary));
  Register_Ordinary_Rsp_descriptor_ = file->message_type(2);
  static const int Register_Ordinary_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary_Rsp, info_),
  };
  Register_Ordinary_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_Ordinary_Rsp_descriptor_,
      Register_Ordinary_Rsp::default_instance_,
      Register_Ordinary_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Ordinary_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register_Ordinary_Rsp));
  Register_Center_descriptor_ = file->message_type(3);
  static const int Register_Center_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Center, zone_id_),
  };
  Register_Center_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_Center_descriptor_,
      Register_Center::default_instance_,
      Register_Center_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Center, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Center, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register_Center));
  Register_Center_Rsp_descriptor_ = file->message_type(4);
  static const int Register_Center_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Center_Rsp, info_),
  };
  Register_Center_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_Center_Rsp_descriptor_,
      Register_Center_Rsp::default_instance_,
      Register_Center_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Center_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register_Center_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register_Center_Rsp));
  Center_Addr_Req_descriptor_ = file->message_type(5);
  static const int Center_Addr_Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center_Addr_Req, zone_id_),
  };
  Center_Addr_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center_Addr_Req_descriptor_,
      Center_Addr_Req::default_instance_,
      Center_Addr_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center_Addr_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center_Addr_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center_Addr_Req));
  Center_Addr_Rsp_descriptor_ = file->message_type(6);
  static const int Center_Addr_Rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center_Addr_Rsp, info_),
  };
  Center_Addr_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Center_Addr_Rsp_descriptor_,
      Center_Addr_Rsp::default_instance_,
      Center_Addr_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center_Addr_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Center_Addr_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Center_Addr_Rsp));
  DEFAULT_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_Info_descriptor_, &Server_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_Ordinary_descriptor_, &Register_Ordinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_Ordinary_Rsp_descriptor_, &Register_Ordinary_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_Center_descriptor_, &Register_Center::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_Center_Rsp_descriptor_, &Register_Center_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center_Addr_Req_descriptor_, &Center_Addr_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Center_Addr_Rsp_descriptor_, &Center_Addr_Rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto() {
  delete Server_Info::default_instance_;
  delete Server_Info_reflection_;
  delete Register_Ordinary::default_instance_;
  delete Register_Ordinary_reflection_;
  delete Register_Ordinary_Rsp::default_instance_;
  delete Register_Ordinary_Rsp_reflection_;
  delete Register_Center::default_instance_;
  delete Register_Center_reflection_;
  delete Register_Center_Rsp::default_instance_;
  delete Register_Center_Rsp_reflection_;
  delete Center_Addr_Req::default_instance_;
  delete Center_Addr_Req_reflection_;
  delete Center_Addr_Rsp::default_instance_;
  delete Center_Addr_Rsp_reflection_;
}

void protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%gabriel/protocol/server/default.proto\022"
    "\027gabriel.protocol.server\"k\n\013Server_Info\022"
    "\023\n\013server_type\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\022"
    "\022\n\ninner_addr\030\003 \001(\t\022\022\n\nouter_addr\030\004 \001(\t\022"
    "\014\n\004port\030\005 \001(\r\";\n\021Register_Ordinary\022\023\n\013se"
    "rver_type\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\"K\n\025Re"
    "gister_Ordinary_Rsp\0222\n\004info\030\001 \003(\0132$.gabr"
    "iel.protocol.server.Server_Info\"\"\n\017Regis"
    "ter_Center\022\017\n\007zone_id\030\001 \001(\r\"I\n\023Register_"
    "Center_Rsp\0222\n\004info\030\001 \003(\0132$.gabriel.proto"
    "col.server.Server_Info\"\"\n\017Center_Addr_Re"
    "q\022\017\n\007zone_id\030\001 \001(\r\"E\n\017Center_Addr_Rsp\0222\n"
    "\004info\030\001 \001(\0132$.gabriel.protocol.server.Se"
    "rver_Info*_\n\016DEFAULT_MSG_ID\022\034\n\030REGISTER_"
    "ORDINARY_SERVER\020\001\022\032\n\026REGISTER_CENTER_SER"
    "VER\020\002\022\023\n\017CENTER_ADDR_REQ\020\003", 626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gabriel/protocol/server/default.proto", &protobuf_RegisterTypes);
  Server_Info::default_instance_ = new Server_Info();
  Register_Ordinary::default_instance_ = new Register_Ordinary();
  Register_Ordinary_Rsp::default_instance_ = new Register_Ordinary_Rsp();
  Register_Center::default_instance_ = new Register_Center();
  Register_Center_Rsp::default_instance_ = new Register_Center_Rsp();
  Center_Addr_Req::default_instance_ = new Center_Addr_Req();
  Center_Addr_Rsp::default_instance_ = new Center_Addr_Rsp();
  Server_Info::default_instance_->InitAsDefaultInstance();
  Register_Ordinary::default_instance_->InitAsDefaultInstance();
  Register_Ordinary_Rsp::default_instance_->InitAsDefaultInstance();
  Register_Center::default_instance_->InitAsDefaultInstance();
  Register_Center_Rsp::default_instance_->InitAsDefaultInstance();
  Center_Addr_Req::default_instance_->InitAsDefaultInstance();
  Center_Addr_Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gabriel_2fprotocol_2fserver_2fdefault_2eproto {
  StaticDescriptorInitializer_gabriel_2fprotocol_2fserver_2fdefault_2eproto() {
    protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  }
} static_descriptor_initializer_gabriel_2fprotocol_2fserver_2fdefault_2eproto_;
const ::google::protobuf::EnumDescriptor* DEFAULT_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEFAULT_MSG_ID_descriptor_;
}
bool DEFAULT_MSG_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Server_Info::kServerTypeFieldNumber;
const int Server_Info::kServerIdFieldNumber;
const int Server_Info::kInnerAddrFieldNumber;
const int Server_Info::kOuterAddrFieldNumber;
const int Server_Info::kPortFieldNumber;
#endif  // !_MSC_VER

Server_Info::Server_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server_Info::InitAsDefaultInstance() {
}

Server_Info::Server_Info(const Server_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server_Info::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  server_id_ = 0u;
  inner_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outer_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server_Info::~Server_Info() {
  SharedDtor();
}

void Server_Info::SharedDtor() {
  if (inner_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete inner_addr_;
  }
  if (outer_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete outer_addr_;
  }
  if (this != default_instance_) {
  }
}

void Server_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_Info_descriptor_;
}

const Server_Info& Server_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Server_Info* Server_Info::default_instance_ = NULL;

Server_Info* Server_Info::New() const {
  return new Server_Info;
}

void Server_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    server_id_ = 0u;
    if (has_inner_addr()) {
      if (inner_addr_ != &::google::protobuf::internal::kEmptyString) {
        inner_addr_->clear();
      }
    }
    if (has_outer_addr()) {
      if (outer_addr_ != &::google::protobuf::internal::kEmptyString) {
        outer_addr_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inner_addr;
        break;
      }

      // optional string inner_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inner_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inner_addr().data(), this->inner_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outer_addr;
        break;
      }

      // optional string outer_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outer_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outer_addr().data(), this->outer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // optional string inner_addr = 3;
  if (has_inner_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inner_addr().data(), this->inner_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->inner_addr(), output);
  }

  // optional string outer_addr = 4;
  if (has_outer_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outer_addr().data(), this->outer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->outer_addr(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // optional string inner_addr = 3;
  if (has_inner_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inner_addr().data(), this->inner_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inner_addr(), target);
  }

  // optional string outer_addr = 4;
  if (has_outer_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outer_addr().data(), this->outer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->outer_addr(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string inner_addr = 3;
    if (has_inner_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inner_addr());
    }

    // optional string outer_addr = 4;
    if (has_outer_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outer_addr());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server_Info::MergeFrom(const Server_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_inner_addr()) {
      set_inner_addr(from.inner_addr());
    }
    if (from.has_outer_addr()) {
      set_outer_addr(from.outer_addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_Info::CopyFrom(const Server_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_Info::IsInitialized() const {

  return true;
}

void Server_Info::Swap(Server_Info* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(server_id_, other->server_id_);
    std::swap(inner_addr_, other->inner_addr_);
    std::swap(outer_addr_, other->outer_addr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_Info_descriptor_;
  metadata.reflection = Server_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register_Ordinary::kServerTypeFieldNumber;
const int Register_Ordinary::kServerIdFieldNumber;
#endif  // !_MSC_VER

Register_Ordinary::Register_Ordinary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register_Ordinary::InitAsDefaultInstance() {
}

Register_Ordinary::Register_Ordinary(const Register_Ordinary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register_Ordinary::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register_Ordinary::~Register_Ordinary() {
  SharedDtor();
}

void Register_Ordinary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Register_Ordinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register_Ordinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_Ordinary_descriptor_;
}

const Register_Ordinary& Register_Ordinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Register_Ordinary* Register_Ordinary::default_instance_ = NULL;

Register_Ordinary* Register_Ordinary::New() const {
  return new Register_Ordinary;
}

void Register_Ordinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register_Ordinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register_Ordinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register_Ordinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register_Ordinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register_Ordinary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register_Ordinary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register_Ordinary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register_Ordinary::MergeFrom(const Register_Ordinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register_Ordinary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register_Ordinary::CopyFrom(const Register_Ordinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register_Ordinary::IsInitialized() const {

  return true;
}

void Register_Ordinary::Swap(Register_Ordinary* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register_Ordinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_Ordinary_descriptor_;
  metadata.reflection = Register_Ordinary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register_Ordinary_Rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Register_Ordinary_Rsp::Register_Ordinary_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register_Ordinary_Rsp::InitAsDefaultInstance() {
}

Register_Ordinary_Rsp::Register_Ordinary_Rsp(const Register_Ordinary_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register_Ordinary_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register_Ordinary_Rsp::~Register_Ordinary_Rsp() {
  SharedDtor();
}

void Register_Ordinary_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Register_Ordinary_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register_Ordinary_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_Ordinary_Rsp_descriptor_;
}

const Register_Ordinary_Rsp& Register_Ordinary_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Register_Ordinary_Rsp* Register_Ordinary_Rsp::default_instance_ = NULL;

Register_Ordinary_Rsp* Register_Ordinary_Rsp::New() const {
  return new Register_Ordinary_Rsp;
}

void Register_Ordinary_Rsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register_Ordinary_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gabriel.protocol.server.Server_Info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register_Ordinary_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gabriel.protocol.server.Server_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register_Ordinary_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gabriel.protocol.server.Server_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register_Ordinary_Rsp::ByteSize() const {
  int total_size = 0;

  // repeated .gabriel.protocol.server.Server_Info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register_Ordinary_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register_Ordinary_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register_Ordinary_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register_Ordinary_Rsp::MergeFrom(const Register_Ordinary_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register_Ordinary_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register_Ordinary_Rsp::CopyFrom(const Register_Ordinary_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register_Ordinary_Rsp::IsInitialized() const {

  return true;
}

void Register_Ordinary_Rsp::Swap(Register_Ordinary_Rsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register_Ordinary_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_Ordinary_Rsp_descriptor_;
  metadata.reflection = Register_Ordinary_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register_Center::kZoneIdFieldNumber;
#endif  // !_MSC_VER

Register_Center::Register_Center()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register_Center::InitAsDefaultInstance() {
}

Register_Center::Register_Center(const Register_Center& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register_Center::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register_Center::~Register_Center() {
  SharedDtor();
}

void Register_Center::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Register_Center::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register_Center::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_Center_descriptor_;
}

const Register_Center& Register_Center::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Register_Center* Register_Center::default_instance_ = NULL;

Register_Center* Register_Center::New() const {
  return new Register_Center;
}

void Register_Center::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register_Center::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register_Center::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register_Center::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register_Center::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register_Center::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register_Center* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register_Center*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register_Center::MergeFrom(const Register_Center& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register_Center::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register_Center::CopyFrom(const Register_Center& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register_Center::IsInitialized() const {

  return true;
}

void Register_Center::Swap(Register_Center* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register_Center::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_Center_descriptor_;
  metadata.reflection = Register_Center_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register_Center_Rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Register_Center_Rsp::Register_Center_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register_Center_Rsp::InitAsDefaultInstance() {
}

Register_Center_Rsp::Register_Center_Rsp(const Register_Center_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register_Center_Rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register_Center_Rsp::~Register_Center_Rsp() {
  SharedDtor();
}

void Register_Center_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Register_Center_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register_Center_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_Center_Rsp_descriptor_;
}

const Register_Center_Rsp& Register_Center_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Register_Center_Rsp* Register_Center_Rsp::default_instance_ = NULL;

Register_Center_Rsp* Register_Center_Rsp::New() const {
  return new Register_Center_Rsp;
}

void Register_Center_Rsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register_Center_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gabriel.protocol.server.Server_Info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register_Center_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gabriel.protocol.server.Server_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register_Center_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gabriel.protocol.server.Server_Info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register_Center_Rsp::ByteSize() const {
  int total_size = 0;

  // repeated .gabriel.protocol.server.Server_Info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register_Center_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register_Center_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register_Center_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register_Center_Rsp::MergeFrom(const Register_Center_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register_Center_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register_Center_Rsp::CopyFrom(const Register_Center_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register_Center_Rsp::IsInitialized() const {

  return true;
}

void Register_Center_Rsp::Swap(Register_Center_Rsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register_Center_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_Center_Rsp_descriptor_;
  metadata.reflection = Register_Center_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center_Addr_Req::kZoneIdFieldNumber;
#endif  // !_MSC_VER

Center_Addr_Req::Center_Addr_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Center_Addr_Req::InitAsDefaultInstance() {
}

Center_Addr_Req::Center_Addr_Req(const Center_Addr_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Center_Addr_Req::SharedCtor() {
  _cached_size_ = 0;
  zone_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center_Addr_Req::~Center_Addr_Req() {
  SharedDtor();
}

void Center_Addr_Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Center_Addr_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center_Addr_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center_Addr_Req_descriptor_;
}

const Center_Addr_Req& Center_Addr_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Center_Addr_Req* Center_Addr_Req::default_instance_ = NULL;

Center_Addr_Req* Center_Addr_Req::New() const {
  return new Center_Addr_Req;
}

void Center_Addr_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zone_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center_Addr_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Center_Addr_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zone_id = 1;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zone_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Center_Addr_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zone_id = 1;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zone_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Center_Addr_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zone_id = 1;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center_Addr_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center_Addr_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center_Addr_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center_Addr_Req::MergeFrom(const Center_Addr_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center_Addr_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center_Addr_Req::CopyFrom(const Center_Addr_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center_Addr_Req::IsInitialized() const {

  return true;
}

void Center_Addr_Req::Swap(Center_Addr_Req* other) {
  if (other != this) {
    std::swap(zone_id_, other->zone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center_Addr_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center_Addr_Req_descriptor_;
  metadata.reflection = Center_Addr_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Center_Addr_Rsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Center_Addr_Rsp::Center_Addr_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Center_Addr_Rsp::InitAsDefaultInstance() {
  info_ = const_cast< ::gabriel::protocol::server::Server_Info*>(&::gabriel::protocol::server::Server_Info::default_instance());
}

Center_Addr_Rsp::Center_Addr_Rsp(const Center_Addr_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Center_Addr_Rsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Center_Addr_Rsp::~Center_Addr_Rsp() {
  SharedDtor();
}

void Center_Addr_Rsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Center_Addr_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Center_Addr_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Center_Addr_Rsp_descriptor_;
}

const Center_Addr_Rsp& Center_Addr_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  return *default_instance_;
}

Center_Addr_Rsp* Center_Addr_Rsp::default_instance_ = NULL;

Center_Addr_Rsp* Center_Addr_Rsp::New() const {
  return new Center_Addr_Rsp;
}

void Center_Addr_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::gabriel::protocol::server::Server_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Center_Addr_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gabriel.protocol.server.Server_Info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Center_Addr_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gabriel.protocol.server.Server_Info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Center_Addr_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gabriel.protocol.server.Server_Info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Center_Addr_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gabriel.protocol.server.Server_Info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Center_Addr_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Center_Addr_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Center_Addr_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Center_Addr_Rsp::MergeFrom(const Center_Addr_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::gabriel::protocol::server::Server_Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Center_Addr_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Center_Addr_Rsp::CopyFrom(const Center_Addr_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Center_Addr_Rsp::IsInitialized() const {

  return true;
}

void Center_Addr_Rsp::Swap(Center_Addr_Rsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Center_Addr_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Center_Addr_Rsp_descriptor_;
  metadata.reflection = Center_Addr_Rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace protocol
}  // namespace gabriel

// @@protoc_insertion_point(global_scope)
