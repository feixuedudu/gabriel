// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gabriel/protocol/server/db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gabriel {
namespace protocol {
namespace server {

namespace {

const ::google::protobuf::Descriptor* Monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Outer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Outer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Outer_Inner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Outer_Inner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Outer_InnerEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DB_Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DB_Msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OuterEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto() {
  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gabriel/protocol/server/db.proto");
  GOOGLE_CHECK(file != NULL);
  Monster_descriptor_ = file->message_type(0);
  static const int Monster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, monster_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, monster_name_),
  };
  Monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monster_descriptor_,
      Monster::default_instance_,
      Monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monster));
  Outer_descriptor_ = file->message_type(1);
  static const int Outer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer, outer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer, outer_string_),
  };
  Outer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Outer_descriptor_,
      Outer::default_instance_,
      Outer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Outer));
  Outer_Inner_descriptor_ = Outer_descriptor_->nested_type(0);
  static const int Outer_Inner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer_Inner, inner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer_Inner, inner_string_),
  };
  Outer_Inner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Outer_Inner_descriptor_,
      Outer_Inner::default_instance_,
      Outer_Inner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer_Inner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outer_Inner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Outer_Inner));
  Outer_InnerEnum_descriptor_ = Outer_descriptor_->enum_type(0);
  DB_Msg_descriptor_ = file->message_type(2);
  static const int DB_Msg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, dbmsg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, outerenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, innerenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, inner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, pubmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, pubenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, pubouter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, pubinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, pubinnerenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, onepubmsg_),
  };
  DB_Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DB_Msg_descriptor_,
      DB_Msg::default_instance_,
      DB_Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DB_Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DB_Msg));
  OuterEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monster_descriptor_, &Monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Outer_descriptor_, &Outer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Outer_Inner_descriptor_, &Outer_Inner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DB_Msg_descriptor_, &DB_Msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdb_2eproto() {
  delete Monster::default_instance_;
  delete Monster_reflection_;
  delete Outer::default_instance_;
  delete Outer_reflection_;
  delete Outer_Inner::default_instance_;
  delete Outer_Inner_reflection_;
  delete DB_Msg::default_instance_;
  delete DB_Msg_reflection_;
}

void protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gabriel::protocol::protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto();
  ::gabriel::protocol::protobuf_AddDesc_gabriel_2fprotocol_2fpub_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n gabriel/protocol/server/db.proto\022\027gabr"
    "iel.protocol.server\032\035gabriel/protocol/sh"
    "ared.proto\032\032gabriel/protocol/pub.proto\"G"
    "\n\007Monster\022\022\n\nmonster_id\030\001 \001(\005\022\022\n\nmonster"
    "_hp\030\002 \001(\005\022\024\n\014monster_name\030\003 \001(\t\"\243\001\n\005Oute"
    "r\022\020\n\010outer_id\030\001 \001(\005\022\024\n\014outer_string\030\002 \001("
    "\t\032/\n\005Inner\022\020\n\010inner_id\030\001 \001(\005\022\024\n\014inner_st"
    "ring\030\002 \001(\t\"A\n\tInnerEnum\022\020\n\014ENUM_INNER_1\020"
    "c\022\020\n\014ENUM_INNER_2\020b\022\020\n\014ENUM_INNER_3\020f\"\317\004"
    "\n\006DB_Msg\022\020\n\010dbmsg_id\030\001 \001(\005\0221\n\007monster\030\002 "
    "\001(\0132 .gabriel.protocol.server.Monster\0225\n"
    "\touterenum\030\003 \001(\0162\".gabriel.protocol.serv"
    "er.OuterEnum\022-\n\005outer\030\004 \001(\0132\036.gabriel.pr"
    "otocol.server.Outer\022;\n\tinnerenum\030\005 \001(\0162("
    ".gabriel.protocol.server.Outer.InnerEnum"
    "\0223\n\005inner\030\006 \001(\0132$.gabriel.protocol.serve"
    "r.Outer.Inner\022(\n\006pubmsg\030\007 \001(\0132\030.gabriel."
    "protocol.PubMsg\022*\n\007pubenum\030\010 \001(\0162\031.gabri"
    "el.protocol.PubEnum\022,\n\010pubouter\030\t \001(\0132\032."
    "gabriel.protocol.PubOuter\0225\n\010pubinner\030\n "
    "\001(\0132#.gabriel.protocol.PubOuter.PubInner"
    "\022=\n\014pubinnerenum\030\013 \001(\0162\'.gabriel.protoco"
    "l.PubOuter.PubInnerEnum\022.\n\tonepubmsg\030\014 \001"
    "(\0132\033.gabriel.protocol.OnePubMsg*A\n\tOuter"
    "Enum\022\020\n\014ENUM_OUTER_1\020\005\022\020\n\014ENUM_OUTER_2\020\006"
    "\022\020\n\014ENUM_OUTER_3\020\007", 1018);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gabriel/protocol/server/db.proto", &protobuf_RegisterTypes);
  Monster::default_instance_ = new Monster();
  Outer::default_instance_ = new Outer();
  Outer_Inner::default_instance_ = new Outer_Inner();
  DB_Msg::default_instance_ = new DB_Msg();
  Monster::default_instance_->InitAsDefaultInstance();
  Outer::default_instance_->InitAsDefaultInstance();
  Outer_Inner::default_instance_->InitAsDefaultInstance();
  DB_Msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gabriel_2fprotocol_2fserver_2fdb_2eproto {
  StaticDescriptorInitializer_gabriel_2fprotocol_2fserver_2fdb_2eproto() {
    protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto();
  }
} static_descriptor_initializer_gabriel_2fprotocol_2fserver_2fdb_2eproto_;

const ::google::protobuf::EnumDescriptor* OuterEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OuterEnum_descriptor_;
}
bool OuterEnum_IsValid(int value) {
  switch(value) {
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Monster::kMonsterIdFieldNumber;
const int Monster::kMonsterHpFieldNumber;
const int Monster::kMonsterNameFieldNumber;
#endif  // !_MSC_VER

Monster::Monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Monster::InitAsDefaultInstance() {
}

Monster::Monster(const Monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Monster::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0;
  monster_hp_ = 0;
  monster_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monster::~Monster() {
  SharedDtor();
}

void Monster::SharedDtor() {
  if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
    delete monster_name_;
  }
  if (this != default_instance_) {
  }
}

void Monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monster_descriptor_;
}

const Monster& Monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto();  return *default_instance_;
}

Monster* Monster::default_instance_ = NULL;

Monster* Monster::New() const {
  return new Monster;
}

void Monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_id_ = 0;
    monster_hp_ = 0;
    if (has_monster_name()) {
      if (monster_name_ != &::google::protobuf::internal::kEmptyString) {
        monster_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 monster_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monster_hp;
        break;
      }
      
      // optional int32 monster_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_hp_)));
          set_has_monster_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monster_name;
        break;
      }
      
      // optional string monster_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monster_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monster_name().data(), this->monster_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monster_id(), output);
  }
  
  // optional int32 monster_hp = 2;
  if (has_monster_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monster_hp(), output);
  }
  
  // optional string monster_name = 3;
  if (has_monster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_name().data(), this->monster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->monster_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monster_id(), target);
  }
  
  // optional int32 monster_hp = 2;
  if (has_monster_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monster_hp(), target);
  }
  
  // optional string monster_name = 3;
  if (has_monster_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monster_name().data(), this->monster_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->monster_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Monster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_id());
    }
    
    // optional int32 monster_hp = 2;
    if (has_monster_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_hp());
    }
    
    // optional string monster_name = 3;
    if (has_monster_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monster_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monster::MergeFrom(const Monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_monster_hp()) {
      set_monster_hp(from.monster_hp());
    }
    if (from.has_monster_name()) {
      set_monster_name(from.monster_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monster::CopyFrom(const Monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monster::IsInitialized() const {
  
  return true;
}

void Monster::Swap(Monster* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(monster_hp_, other->monster_hp_);
    std::swap(monster_name_, other->monster_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monster_descriptor_;
  metadata.reflection = Monster_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Outer_InnerEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Outer_InnerEnum_descriptor_;
}
bool Outer_InnerEnum_IsValid(int value) {
  switch(value) {
    case 98:
    case 99:
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Outer_InnerEnum Outer::ENUM_INNER_1;
const Outer_InnerEnum Outer::ENUM_INNER_2;
const Outer_InnerEnum Outer::ENUM_INNER_3;
const Outer_InnerEnum Outer::InnerEnum_MIN;
const Outer_InnerEnum Outer::InnerEnum_MAX;
const int Outer::InnerEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Outer_Inner::kInnerIdFieldNumber;
const int Outer_Inner::kInnerStringFieldNumber;
#endif  // !_MSC_VER

Outer_Inner::Outer_Inner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Outer_Inner::InitAsDefaultInstance() {
}

Outer_Inner::Outer_Inner(const Outer_Inner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Outer_Inner::SharedCtor() {
  _cached_size_ = 0;
  inner_id_ = 0;
  inner_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Outer_Inner::~Outer_Inner() {
  SharedDtor();
}

void Outer_Inner::SharedDtor() {
  if (inner_string_ != &::google::protobuf::internal::kEmptyString) {
    delete inner_string_;
  }
  if (this != default_instance_) {
  }
}

void Outer_Inner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Outer_Inner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Outer_Inner_descriptor_;
}

const Outer_Inner& Outer_Inner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto();  return *default_instance_;
}

Outer_Inner* Outer_Inner::default_instance_ = NULL;

Outer_Inner* Outer_Inner::New() const {
  return new Outer_Inner;
}

void Outer_Inner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inner_id_ = 0;
    if (has_inner_string()) {
      if (inner_string_ != &::google::protobuf::internal::kEmptyString) {
        inner_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Outer_Inner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 inner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_id_)));
          set_has_inner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inner_string;
        break;
      }
      
      // optional string inner_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inner_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inner_string().data(), this->inner_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Outer_Inner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 inner_id = 1;
  if (has_inner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inner_id(), output);
  }
  
  // optional string inner_string = 2;
  if (has_inner_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inner_string().data(), this->inner_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inner_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Outer_Inner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 inner_id = 1;
  if (has_inner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inner_id(), target);
  }
  
  // optional string inner_string = 2;
  if (has_inner_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inner_string().data(), this->inner_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inner_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Outer_Inner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 inner_id = 1;
    if (has_inner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_id());
    }
    
    // optional string inner_string = 2;
    if (has_inner_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inner_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Outer_Inner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Outer_Inner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Outer_Inner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Outer_Inner::MergeFrom(const Outer_Inner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inner_id()) {
      set_inner_id(from.inner_id());
    }
    if (from.has_inner_string()) {
      set_inner_string(from.inner_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Outer_Inner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outer_Inner::CopyFrom(const Outer_Inner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outer_Inner::IsInitialized() const {
  
  return true;
}

void Outer_Inner::Swap(Outer_Inner* other) {
  if (other != this) {
    std::swap(inner_id_, other->inner_id_);
    std::swap(inner_string_, other->inner_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Outer_Inner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Outer_Inner_descriptor_;
  metadata.reflection = Outer_Inner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Outer::kOuterIdFieldNumber;
const int Outer::kOuterStringFieldNumber;
#endif  // !_MSC_VER

Outer::Outer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Outer::InitAsDefaultInstance() {
}

Outer::Outer(const Outer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Outer::SharedCtor() {
  _cached_size_ = 0;
  outer_id_ = 0;
  outer_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Outer::~Outer() {
  SharedDtor();
}

void Outer::SharedDtor() {
  if (outer_string_ != &::google::protobuf::internal::kEmptyString) {
    delete outer_string_;
  }
  if (this != default_instance_) {
  }
}

void Outer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Outer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Outer_descriptor_;
}

const Outer& Outer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto();  return *default_instance_;
}

Outer* Outer::default_instance_ = NULL;

Outer* Outer::New() const {
  return new Outer;
}

void Outer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outer_id_ = 0;
    if (has_outer_string()) {
      if (outer_string_ != &::google::protobuf::internal::kEmptyString) {
        outer_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Outer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 outer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outer_id_)));
          set_has_outer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outer_string;
        break;
      }
      
      // optional string outer_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outer_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outer_string().data(), this->outer_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Outer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 outer_id = 1;
  if (has_outer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outer_id(), output);
  }
  
  // optional string outer_string = 2;
  if (has_outer_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outer_string().data(), this->outer_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->outer_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Outer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 outer_id = 1;
  if (has_outer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outer_id(), target);
  }
  
  // optional string outer_string = 2;
  if (has_outer_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outer_string().data(), this->outer_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outer_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Outer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 outer_id = 1;
    if (has_outer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outer_id());
    }
    
    // optional string outer_string = 2;
    if (has_outer_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outer_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Outer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Outer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Outer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Outer::MergeFrom(const Outer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outer_id()) {
      set_outer_id(from.outer_id());
    }
    if (from.has_outer_string()) {
      set_outer_string(from.outer_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Outer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outer::CopyFrom(const Outer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outer::IsInitialized() const {
  
  return true;
}

void Outer::Swap(Outer* other) {
  if (other != this) {
    std::swap(outer_id_, other->outer_id_);
    std::swap(outer_string_, other->outer_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Outer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Outer_descriptor_;
  metadata.reflection = Outer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DB_Msg::kDbmsgIdFieldNumber;
const int DB_Msg::kMonsterFieldNumber;
const int DB_Msg::kOuterenumFieldNumber;
const int DB_Msg::kOuterFieldNumber;
const int DB_Msg::kInnerenumFieldNumber;
const int DB_Msg::kInnerFieldNumber;
const int DB_Msg::kPubmsgFieldNumber;
const int DB_Msg::kPubenumFieldNumber;
const int DB_Msg::kPubouterFieldNumber;
const int DB_Msg::kPubinnerFieldNumber;
const int DB_Msg::kPubinnerenumFieldNumber;
const int DB_Msg::kOnepubmsgFieldNumber;
#endif  // !_MSC_VER

DB_Msg::DB_Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DB_Msg::InitAsDefaultInstance() {
  monster_ = const_cast< ::gabriel::protocol::server::Monster*>(&::gabriel::protocol::server::Monster::default_instance());
  outer_ = const_cast< ::gabriel::protocol::server::Outer*>(&::gabriel::protocol::server::Outer::default_instance());
  inner_ = const_cast< ::gabriel::protocol::server::Outer_Inner*>(&::gabriel::protocol::server::Outer_Inner::default_instance());
  pubmsg_ = const_cast< ::gabriel::protocol::PubMsg*>(&::gabriel::protocol::PubMsg::default_instance());
  pubouter_ = const_cast< ::gabriel::protocol::PubOuter*>(&::gabriel::protocol::PubOuter::default_instance());
  pubinner_ = const_cast< ::gabriel::protocol::PubOuter_PubInner*>(&::gabriel::protocol::PubOuter_PubInner::default_instance());
  onepubmsg_ = const_cast< ::gabriel::protocol::OnePubMsg*>(&::gabriel::protocol::OnePubMsg::default_instance());
}

DB_Msg::DB_Msg(const DB_Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DB_Msg::SharedCtor() {
  _cached_size_ = 0;
  dbmsg_id_ = 0;
  monster_ = NULL;
  outerenum_ = 5;
  outer_ = NULL;
  innerenum_ = 99;
  inner_ = NULL;
  pubmsg_ = NULL;
  pubenum_ = 999;
  pubouter_ = NULL;
  pubinner_ = NULL;
  pubinnerenum_ = 8;
  onepubmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DB_Msg::~DB_Msg() {
  SharedDtor();
}

void DB_Msg::SharedDtor() {
  if (this != default_instance_) {
    delete monster_;
    delete outer_;
    delete inner_;
    delete pubmsg_;
    delete pubouter_;
    delete pubinner_;
    delete onepubmsg_;
  }
}

void DB_Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DB_Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DB_Msg_descriptor_;
}

const DB_Msg& DB_Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdb_2eproto();  return *default_instance_;
}

DB_Msg* DB_Msg::default_instance_ = NULL;

DB_Msg* DB_Msg::New() const {
  return new DB_Msg;
}

void DB_Msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbmsg_id_ = 0;
    if (has_monster()) {
      if (monster_ != NULL) monster_->::gabriel::protocol::server::Monster::Clear();
    }
    outerenum_ = 5;
    if (has_outer()) {
      if (outer_ != NULL) outer_->::gabriel::protocol::server::Outer::Clear();
    }
    innerenum_ = 99;
    if (has_inner()) {
      if (inner_ != NULL) inner_->::gabriel::protocol::server::Outer_Inner::Clear();
    }
    if (has_pubmsg()) {
      if (pubmsg_ != NULL) pubmsg_->::gabriel::protocol::PubMsg::Clear();
    }
    pubenum_ = 999;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pubouter()) {
      if (pubouter_ != NULL) pubouter_->::gabriel::protocol::PubOuter::Clear();
    }
    if (has_pubinner()) {
      if (pubinner_ != NULL) pubinner_->::gabriel::protocol::PubOuter_PubInner::Clear();
    }
    pubinnerenum_ = 8;
    if (has_onepubmsg()) {
      if (onepubmsg_ != NULL) onepubmsg_->::gabriel::protocol::OnePubMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DB_Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dbmsg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbmsg_id_)));
          set_has_dbmsg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster;
        break;
      }
      
      // optional .gabriel.protocol.server.Monster monster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outerenum;
        break;
      }
      
      // optional .gabriel.protocol.server.OuterEnum outerenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerenum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (gabriel::protocol::server::OuterEnum_IsValid(value)) {
            set_outerenum(static_cast< gabriel::protocol::server::OuterEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outer;
        break;
      }
      
      // optional .gabriel.protocol.server.Outer outer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_innerenum;
        break;
      }
      
      // optional .gabriel.protocol.server.Outer.InnerEnum innerenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_innerenum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gabriel::protocol::server::Outer_InnerEnum_IsValid(value)) {
            set_innerenum(static_cast< ::gabriel::protocol::server::Outer_InnerEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_inner;
        break;
      }
      
      // optional .gabriel.protocol.server.Outer.Inner inner = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pubmsg;
        break;
      }
      
      // optional .gabriel.protocol.PubMsg pubmsg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pubmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pubenum;
        break;
      }
      
      // optional .gabriel.protocol.PubEnum pubenum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubenum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (gabriel::protocol::PubEnum_IsValid(value)) {
            set_pubenum(static_cast< gabriel::protocol::PubEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pubouter;
        break;
      }
      
      // optional .gabriel.protocol.PubOuter pubouter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubouter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pubouter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pubinner;
        break;
      }
      
      // optional .gabriel.protocol.PubOuter.PubInner pubinner = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubinner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pubinner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pubinnerenum;
        break;
      }
      
      // optional .gabriel.protocol.PubOuter.PubInnerEnum pubinnerenum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubinnerenum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gabriel::protocol::PubOuter_PubInnerEnum_IsValid(value)) {
            set_pubinnerenum(static_cast< ::gabriel::protocol::PubOuter_PubInnerEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_onepubmsg;
        break;
      }
      
      // optional .gabriel.protocol.OnePubMsg onepubmsg = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onepubmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onepubmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DB_Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dbmsg_id = 1;
  if (has_dbmsg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dbmsg_id(), output);
  }
  
  // optional .gabriel.protocol.server.Monster monster = 2;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster(), output);
  }
  
  // optional .gabriel.protocol.server.OuterEnum outerenum = 3;
  if (has_outerenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->outerenum(), output);
  }
  
  // optional .gabriel.protocol.server.Outer outer = 4;
  if (has_outer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outer(), output);
  }
  
  // optional .gabriel.protocol.server.Outer.InnerEnum innerenum = 5;
  if (has_innerenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->innerenum(), output);
  }
  
  // optional .gabriel.protocol.server.Outer.Inner inner = 6;
  if (has_inner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->inner(), output);
  }
  
  // optional .gabriel.protocol.PubMsg pubmsg = 7;
  if (has_pubmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pubmsg(), output);
  }
  
  // optional .gabriel.protocol.PubEnum pubenum = 8;
  if (has_pubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pubenum(), output);
  }
  
  // optional .gabriel.protocol.PubOuter pubouter = 9;
  if (has_pubouter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pubouter(), output);
  }
  
  // optional .gabriel.protocol.PubOuter.PubInner pubinner = 10;
  if (has_pubinner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pubinner(), output);
  }
  
  // optional .gabriel.protocol.PubOuter.PubInnerEnum pubinnerenum = 11;
  if (has_pubinnerenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pubinnerenum(), output);
  }
  
  // optional .gabriel.protocol.OnePubMsg onepubmsg = 12;
  if (has_onepubmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->onepubmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DB_Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dbmsg_id = 1;
  if (has_dbmsg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dbmsg_id(), target);
  }
  
  // optional .gabriel.protocol.server.Monster monster = 2;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster(), target);
  }
  
  // optional .gabriel.protocol.server.OuterEnum outerenum = 3;
  if (has_outerenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->outerenum(), target);
  }
  
  // optional .gabriel.protocol.server.Outer outer = 4;
  if (has_outer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outer(), target);
  }
  
  // optional .gabriel.protocol.server.Outer.InnerEnum innerenum = 5;
  if (has_innerenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->innerenum(), target);
  }
  
  // optional .gabriel.protocol.server.Outer.Inner inner = 6;
  if (has_inner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->inner(), target);
  }
  
  // optional .gabriel.protocol.PubMsg pubmsg = 7;
  if (has_pubmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pubmsg(), target);
  }
  
  // optional .gabriel.protocol.PubEnum pubenum = 8;
  if (has_pubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pubenum(), target);
  }
  
  // optional .gabriel.protocol.PubOuter pubouter = 9;
  if (has_pubouter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pubouter(), target);
  }
  
  // optional .gabriel.protocol.PubOuter.PubInner pubinner = 10;
  if (has_pubinner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pubinner(), target);
  }
  
  // optional .gabriel.protocol.PubOuter.PubInnerEnum pubinnerenum = 11;
  if (has_pubinnerenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pubinnerenum(), target);
  }
  
  // optional .gabriel.protocol.OnePubMsg onepubmsg = 12;
  if (has_onepubmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->onepubmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DB_Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dbmsg_id = 1;
    if (has_dbmsg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbmsg_id());
    }
    
    // optional .gabriel.protocol.server.Monster monster = 2;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster());
    }
    
    // optional .gabriel.protocol.server.OuterEnum outerenum = 3;
    if (has_outerenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->outerenum());
    }
    
    // optional .gabriel.protocol.server.Outer outer = 4;
    if (has_outer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outer());
    }
    
    // optional .gabriel.protocol.server.Outer.InnerEnum innerenum = 5;
    if (has_innerenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->innerenum());
    }
    
    // optional .gabriel.protocol.server.Outer.Inner inner = 6;
    if (has_inner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner());
    }
    
    // optional .gabriel.protocol.PubMsg pubmsg = 7;
    if (has_pubmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pubmsg());
    }
    
    // optional .gabriel.protocol.PubEnum pubenum = 8;
    if (has_pubenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pubenum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gabriel.protocol.PubOuter pubouter = 9;
    if (has_pubouter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pubouter());
    }
    
    // optional .gabriel.protocol.PubOuter.PubInner pubinner = 10;
    if (has_pubinner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pubinner());
    }
    
    // optional .gabriel.protocol.PubOuter.PubInnerEnum pubinnerenum = 11;
    if (has_pubinnerenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pubinnerenum());
    }
    
    // optional .gabriel.protocol.OnePubMsg onepubmsg = 12;
    if (has_onepubmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onepubmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DB_Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DB_Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DB_Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DB_Msg::MergeFrom(const DB_Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbmsg_id()) {
      set_dbmsg_id(from.dbmsg_id());
    }
    if (from.has_monster()) {
      mutable_monster()->::gabriel::protocol::server::Monster::MergeFrom(from.monster());
    }
    if (from.has_outerenum()) {
      set_outerenum(from.outerenum());
    }
    if (from.has_outer()) {
      mutable_outer()->::gabriel::protocol::server::Outer::MergeFrom(from.outer());
    }
    if (from.has_innerenum()) {
      set_innerenum(from.innerenum());
    }
    if (from.has_inner()) {
      mutable_inner()->::gabriel::protocol::server::Outer_Inner::MergeFrom(from.inner());
    }
    if (from.has_pubmsg()) {
      mutable_pubmsg()->::gabriel::protocol::PubMsg::MergeFrom(from.pubmsg());
    }
    if (from.has_pubenum()) {
      set_pubenum(from.pubenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pubouter()) {
      mutable_pubouter()->::gabriel::protocol::PubOuter::MergeFrom(from.pubouter());
    }
    if (from.has_pubinner()) {
      mutable_pubinner()->::gabriel::protocol::PubOuter_PubInner::MergeFrom(from.pubinner());
    }
    if (from.has_pubinnerenum()) {
      set_pubinnerenum(from.pubinnerenum());
    }
    if (from.has_onepubmsg()) {
      mutable_onepubmsg()->::gabriel::protocol::OnePubMsg::MergeFrom(from.onepubmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DB_Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DB_Msg::CopyFrom(const DB_Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DB_Msg::IsInitialized() const {
  
  return true;
}

void DB_Msg::Swap(DB_Msg* other) {
  if (other != this) {
    std::swap(dbmsg_id_, other->dbmsg_id_);
    std::swap(monster_, other->monster_);
    std::swap(outerenum_, other->outerenum_);
    std::swap(outer_, other->outer_);
    std::swap(innerenum_, other->innerenum_);
    std::swap(inner_, other->inner_);
    std::swap(pubmsg_, other->pubmsg_);
    std::swap(pubenum_, other->pubenum_);
    std::swap(pubouter_, other->pubouter_);
    std::swap(pubinner_, other->pubinner_);
    std::swap(pubinnerenum_, other->pubinnerenum_);
    std::swap(onepubmsg_, other->onepubmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DB_Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DB_Msg_descriptor_;
  metadata.reflection = DB_Msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace protocol
}  // namespace gabriel

// @@protoc_insertion_point(global_scope)
