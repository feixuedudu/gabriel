// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gabriel/protocol/server/default.proto

#ifndef PROTOBUF_gabriel_2fprotocol_2fserver_2fdefault_2eproto__INCLUDED
#define PROTOBUF_gabriel_2fprotocol_2fserver_2fdefault_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace gabriel {
namespace protocol {
namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();

class Server_Info;
class Register_Ordinary;
class Register_Ordinary_Rsp;
class Register_Center;
class Register_Center_Rsp;
class Center_Addr_Req;
class Center_Addr_Rsp;

enum DEFAULT_MSG_ID {
  REGISTER_ORDINARY_SERVER = 1,
  REGISTER_CENTER_SERVER = 2,
  CENTER_ADDR_REQ = 3
};
bool DEFAULT_MSG_ID_IsValid(int value);
const DEFAULT_MSG_ID DEFAULT_MSG_ID_MIN = REGISTER_ORDINARY_SERVER;
const DEFAULT_MSG_ID DEFAULT_MSG_ID_MAX = CENTER_ADDR_REQ;
const int DEFAULT_MSG_ID_ARRAYSIZE = DEFAULT_MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DEFAULT_MSG_ID_descriptor();
inline const ::std::string& DEFAULT_MSG_ID_Name(DEFAULT_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DEFAULT_MSG_ID_descriptor(), value);
}
inline bool DEFAULT_MSG_ID_Parse(
    const ::std::string& name, DEFAULT_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DEFAULT_MSG_ID>(
    DEFAULT_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class Server_Info : public ::google::protobuf::Message {
 public:
  Server_Info();
  virtual ~Server_Info();
  
  Server_Info(const Server_Info& from);
  
  inline Server_Info& operator=(const Server_Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_Info& default_instance();
  
  void Swap(Server_Info* other);
  
  // implements Message ----------------------------------------------
  
  Server_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server_Info& from);
  void MergeFrom(const Server_Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 server_type = 1;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 server_type() const;
  inline void set_server_type(::google::protobuf::uint32 value);
  
  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // optional string inner_addr = 3;
  inline bool has_inner_addr() const;
  inline void clear_inner_addr();
  static const int kInnerAddrFieldNumber = 3;
  inline const ::std::string& inner_addr() const;
  inline void set_inner_addr(const ::std::string& value);
  inline void set_inner_addr(const char* value);
  inline void set_inner_addr(const char* value, size_t size);
  inline ::std::string* mutable_inner_addr();
  inline ::std::string* release_inner_addr();
  
  // optional string outer_addr = 4;
  inline bool has_outer_addr() const;
  inline void clear_outer_addr();
  static const int kOuterAddrFieldNumber = 4;
  inline const ::std::string& outer_addr() const;
  inline void set_outer_addr(const ::std::string& value);
  inline void set_outer_addr(const char* value);
  inline void set_outer_addr(const char* value, size_t size);
  inline ::std::string* mutable_outer_addr();
  inline ::std::string* release_outer_addr();
  
  // optional uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Server_Info)
 private:
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_inner_addr();
  inline void clear_has_inner_addr();
  inline void set_has_outer_addr();
  inline void clear_has_outer_addr();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 server_type_;
  ::google::protobuf::uint32 server_id_;
  ::std::string* inner_addr_;
  ::std::string* outer_addr_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Server_Info* default_instance_;
};
// -------------------------------------------------------------------

class Register_Ordinary : public ::google::protobuf::Message {
 public:
  Register_Ordinary();
  virtual ~Register_Ordinary();
  
  Register_Ordinary(const Register_Ordinary& from);
  
  inline Register_Ordinary& operator=(const Register_Ordinary& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Register_Ordinary& default_instance();
  
  void Swap(Register_Ordinary* other);
  
  // implements Message ----------------------------------------------
  
  Register_Ordinary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register_Ordinary& from);
  void MergeFrom(const Register_Ordinary& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 server_type = 1;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 server_type() const;
  inline void set_server_type(::google::protobuf::uint32 value);
  
  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Register_Ordinary)
 private:
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 server_type_;
  ::google::protobuf::uint32 server_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Register_Ordinary* default_instance_;
};
// -------------------------------------------------------------------

class Register_Ordinary_Rsp : public ::google::protobuf::Message {
 public:
  Register_Ordinary_Rsp();
  virtual ~Register_Ordinary_Rsp();
  
  Register_Ordinary_Rsp(const Register_Ordinary_Rsp& from);
  
  inline Register_Ordinary_Rsp& operator=(const Register_Ordinary_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Register_Ordinary_Rsp& default_instance();
  
  void Swap(Register_Ordinary_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Register_Ordinary_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register_Ordinary_Rsp& from);
  void MergeFrom(const Register_Ordinary_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .gabriel.protocol.server.Server_Info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::gabriel::protocol::server::Server_Info& info(int index) const;
  inline ::gabriel::protocol::server::Server_Info* mutable_info(int index);
  inline ::gabriel::protocol::server::Server_Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Register_Ordinary_Rsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Register_Ordinary_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Register_Center : public ::google::protobuf::Message {
 public:
  Register_Center();
  virtual ~Register_Center();
  
  Register_Center(const Register_Center& from);
  
  inline Register_Center& operator=(const Register_Center& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Register_Center& default_instance();
  
  void Swap(Register_Center* other);
  
  // implements Message ----------------------------------------------
  
  Register_Center* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register_Center& from);
  void MergeFrom(const Register_Center& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Register_Center)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Register_Center* default_instance_;
};
// -------------------------------------------------------------------

class Register_Center_Rsp : public ::google::protobuf::Message {
 public:
  Register_Center_Rsp();
  virtual ~Register_Center_Rsp();
  
  Register_Center_Rsp(const Register_Center_Rsp& from);
  
  inline Register_Center_Rsp& operator=(const Register_Center_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Register_Center_Rsp& default_instance();
  
  void Swap(Register_Center_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Register_Center_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register_Center_Rsp& from);
  void MergeFrom(const Register_Center_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .gabriel.protocol.server.Server_Info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::gabriel::protocol::server::Server_Info& info(int index) const;
  inline ::gabriel::protocol::server::Server_Info* mutable_info(int index);
  inline ::gabriel::protocol::server::Server_Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Register_Center_Rsp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Register_Center_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Center_Addr_Req : public ::google::protobuf::Message {
 public:
  Center_Addr_Req();
  virtual ~Center_Addr_Req();
  
  Center_Addr_Req(const Center_Addr_Req& from);
  
  inline Center_Addr_Req& operator=(const Center_Addr_Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Center_Addr_Req& default_instance();
  
  void Swap(Center_Addr_Req* other);
  
  // implements Message ----------------------------------------------
  
  Center_Addr_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Center_Addr_Req& from);
  void MergeFrom(const Center_Addr_Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Center_Addr_Req)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Center_Addr_Req* default_instance_;
};
// -------------------------------------------------------------------

class Center_Addr_Rsp : public ::google::protobuf::Message {
 public:
  Center_Addr_Rsp();
  virtual ~Center_Addr_Rsp();
  
  Center_Addr_Rsp(const Center_Addr_Rsp& from);
  
  inline Center_Addr_Rsp& operator=(const Center_Addr_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Center_Addr_Rsp& default_instance();
  
  void Swap(Center_Addr_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  Center_Addr_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Center_Addr_Rsp& from);
  void MergeFrom(const Center_Addr_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .gabriel.protocol.server.Server_Info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::gabriel::protocol::server::Server_Info& info() const;
  inline ::gabriel::protocol::server::Server_Info* mutable_info();
  inline ::gabriel::protocol::server::Server_Info* release_info();
  
  // @@protoc_insertion_point(class_scope:gabriel.protocol.server.Center_Addr_Rsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::gabriel::protocol::server::Server_Info* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_AssignDesc_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  friend void protobuf_ShutdownFile_gabriel_2fprotocol_2fserver_2fdefault_2eproto();
  
  void InitAsDefaultInstance();
  static Center_Addr_Rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// Server_Info

// optional uint32 server_type = 1;
inline bool Server_Info::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server_Info::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server_Info::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server_Info::clear_server_type() {
  server_type_ = 0u;
  clear_has_server_type();
}
inline ::google::protobuf::uint32 Server_Info::server_type() const {
  return server_type_;
}
inline void Server_Info::set_server_type(::google::protobuf::uint32 value) {
  set_has_server_type();
  server_type_ = value;
}

// optional uint32 server_id = 2;
inline bool Server_Info::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server_Info::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server_Info::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server_Info::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 Server_Info::server_id() const {
  return server_id_;
}
inline void Server_Info::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string inner_addr = 3;
inline bool Server_Info::has_inner_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Server_Info::set_has_inner_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Server_Info::clear_has_inner_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Server_Info::clear_inner_addr() {
  if (inner_addr_ != &::google::protobuf::internal::kEmptyString) {
    inner_addr_->clear();
  }
  clear_has_inner_addr();
}
inline const ::std::string& Server_Info::inner_addr() const {
  return *inner_addr_;
}
inline void Server_Info::set_inner_addr(const ::std::string& value) {
  set_has_inner_addr();
  if (inner_addr_ == &::google::protobuf::internal::kEmptyString) {
    inner_addr_ = new ::std::string;
  }
  inner_addr_->assign(value);
}
inline void Server_Info::set_inner_addr(const char* value) {
  set_has_inner_addr();
  if (inner_addr_ == &::google::protobuf::internal::kEmptyString) {
    inner_addr_ = new ::std::string;
  }
  inner_addr_->assign(value);
}
inline void Server_Info::set_inner_addr(const char* value, size_t size) {
  set_has_inner_addr();
  if (inner_addr_ == &::google::protobuf::internal::kEmptyString) {
    inner_addr_ = new ::std::string;
  }
  inner_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info::mutable_inner_addr() {
  set_has_inner_addr();
  if (inner_addr_ == &::google::protobuf::internal::kEmptyString) {
    inner_addr_ = new ::std::string;
  }
  return inner_addr_;
}
inline ::std::string* Server_Info::release_inner_addr() {
  clear_has_inner_addr();
  if (inner_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inner_addr_;
    inner_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string outer_addr = 4;
inline bool Server_Info::has_outer_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Server_Info::set_has_outer_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Server_Info::clear_has_outer_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Server_Info::clear_outer_addr() {
  if (outer_addr_ != &::google::protobuf::internal::kEmptyString) {
    outer_addr_->clear();
  }
  clear_has_outer_addr();
}
inline const ::std::string& Server_Info::outer_addr() const {
  return *outer_addr_;
}
inline void Server_Info::set_outer_addr(const ::std::string& value) {
  set_has_outer_addr();
  if (outer_addr_ == &::google::protobuf::internal::kEmptyString) {
    outer_addr_ = new ::std::string;
  }
  outer_addr_->assign(value);
}
inline void Server_Info::set_outer_addr(const char* value) {
  set_has_outer_addr();
  if (outer_addr_ == &::google::protobuf::internal::kEmptyString) {
    outer_addr_ = new ::std::string;
  }
  outer_addr_->assign(value);
}
inline void Server_Info::set_outer_addr(const char* value, size_t size) {
  set_has_outer_addr();
  if (outer_addr_ == &::google::protobuf::internal::kEmptyString) {
    outer_addr_ = new ::std::string;
  }
  outer_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server_Info::mutable_outer_addr() {
  set_has_outer_addr();
  if (outer_addr_ == &::google::protobuf::internal::kEmptyString) {
    outer_addr_ = new ::std::string;
  }
  return outer_addr_;
}
inline ::std::string* Server_Info::release_outer_addr() {
  clear_has_outer_addr();
  if (outer_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = outer_addr_;
    outer_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 port = 5;
inline bool Server_Info::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Server_Info::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Server_Info::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Server_Info::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Server_Info::port() const {
  return port_;
}
inline void Server_Info::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Register_Ordinary

// optional uint32 server_type = 1;
inline bool Register_Ordinary::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register_Ordinary::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register_Ordinary::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register_Ordinary::clear_server_type() {
  server_type_ = 0u;
  clear_has_server_type();
}
inline ::google::protobuf::uint32 Register_Ordinary::server_type() const {
  return server_type_;
}
inline void Register_Ordinary::set_server_type(::google::protobuf::uint32 value) {
  set_has_server_type();
  server_type_ = value;
}

// optional uint32 server_id = 2;
inline bool Register_Ordinary::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register_Ordinary::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register_Ordinary::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register_Ordinary::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 Register_Ordinary::server_id() const {
  return server_id_;
}
inline void Register_Ordinary::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// Register_Ordinary_Rsp

// repeated .gabriel.protocol.server.Server_Info info = 1;
inline int Register_Ordinary_Rsp::info_size() const {
  return info_.size();
}
inline void Register_Ordinary_Rsp::clear_info() {
  info_.Clear();
}
inline const ::gabriel::protocol::server::Server_Info& Register_Ordinary_Rsp::info(int index) const {
  return info_.Get(index);
}
inline ::gabriel::protocol::server::Server_Info* Register_Ordinary_Rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::gabriel::protocol::server::Server_Info* Register_Ordinary_Rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >&
Register_Ordinary_Rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >*
Register_Ordinary_Rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Register_Center

// optional uint32 zone_id = 1;
inline bool Register_Center::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register_Center::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register_Center::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register_Center::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 Register_Center::zone_id() const {
  return zone_id_;
}
inline void Register_Center::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// Register_Center_Rsp

// repeated .gabriel.protocol.server.Server_Info info = 1;
inline int Register_Center_Rsp::info_size() const {
  return info_.size();
}
inline void Register_Center_Rsp::clear_info() {
  info_.Clear();
}
inline const ::gabriel::protocol::server::Server_Info& Register_Center_Rsp::info(int index) const {
  return info_.Get(index);
}
inline ::gabriel::protocol::server::Server_Info* Register_Center_Rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::gabriel::protocol::server::Server_Info* Register_Center_Rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >&
Register_Center_Rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::gabriel::protocol::server::Server_Info >*
Register_Center_Rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Center_Addr_Req

// optional uint32 zone_id = 1;
inline bool Center_Addr_Req::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Center_Addr_Req::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Center_Addr_Req::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Center_Addr_Req::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 Center_Addr_Req::zone_id() const {
  return zone_id_;
}
inline void Center_Addr_Req::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// -------------------------------------------------------------------

// Center_Addr_Rsp

// optional .gabriel.protocol.server.Server_Info info = 1;
inline bool Center_Addr_Rsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Center_Addr_Rsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Center_Addr_Rsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Center_Addr_Rsp::clear_info() {
  if (info_ != NULL) info_->::gabriel::protocol::server::Server_Info::Clear();
  clear_has_info();
}
inline const ::gabriel::protocol::server::Server_Info& Center_Addr_Rsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::gabriel::protocol::server::Server_Info* Center_Addr_Rsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::gabriel::protocol::server::Server_Info;
  return info_;
}
inline ::gabriel::protocol::server::Server_Info* Center_Addr_Rsp::release_info() {
  clear_has_info();
  ::gabriel::protocol::server::Server_Info* temp = info_;
  info_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace protocol
}  // namespace gabriel

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< gabriel::protocol::server::DEFAULT_MSG_ID>() {
  return gabriel::protocol::server::DEFAULT_MSG_ID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gabriel_2fprotocol_2fserver_2fdefault_2eproto__INCLUDED
