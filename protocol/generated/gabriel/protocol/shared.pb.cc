// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gabriel/protocol/shared.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gabriel {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PubMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubOuter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubOuter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubOuter_PubInner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubOuter_PubInner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PubOuter_PubInnerEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PubEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gabriel_2fprotocol_2fshared_2eproto() {
  protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gabriel/protocol/shared.proto");
  GOOGLE_CHECK(file != NULL);
  PubMsg_descriptor_ = file->message_type(0);
  static const int PubMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubMsg, pubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubMsg, pubname_),
  };
  PubMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubMsg_descriptor_,
      PubMsg::default_instance_,
      PubMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubMsg));
  PubOuter_descriptor_ = file->message_type(1);
  static const int PubOuter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter, outerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter, outername_),
  };
  PubOuter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubOuter_descriptor_,
      PubOuter::default_instance_,
      PubOuter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubOuter));
  PubOuter_PubInner_descriptor_ = PubOuter_descriptor_->nested_type(0);
  static const int PubOuter_PubInner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter_PubInner, innerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter_PubInner, innername_),
  };
  PubOuter_PubInner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubOuter_PubInner_descriptor_,
      PubOuter_PubInner::default_instance_,
      PubOuter_PubInner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter_PubInner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubOuter_PubInner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubOuter_PubInner));
  PubOuter_PubInnerEnum_descriptor_ = PubOuter_descriptor_->enum_type(0);
  PubEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gabriel_2fprotocol_2fshared_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubMsg_descriptor_, &PubMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubOuter_descriptor_, &PubOuter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubOuter_PubInner_descriptor_, &PubOuter_PubInner::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gabriel_2fprotocol_2fshared_2eproto() {
  delete PubMsg::default_instance_;
  delete PubMsg_reflection_;
  delete PubOuter::default_instance_;
  delete PubOuter_reflection_;
  delete PubOuter_PubInner::default_instance_;
  delete PubOuter_PubInner_reflection_;
}

void protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035gabriel/protocol/shared.proto\022\020gabriel"
    ".protocol\"(\n\006PubMsg\022\r\n\005pubid\030\001 \001(\005\022\017\n\007pu"
    "bname\030\002 \001(\t\"\255\001\n\010PubOuter\022\017\n\007outerid\030\001 \001("
    "\005\022\021\n\toutername\030\002 \001(\t\032.\n\010PubInner\022\017\n\007inne"
    "rid\030\001 \001(\005\022\021\n\tinnername\030\002 \001(\t\"M\n\014PubInner"
    "Enum\022\023\n\017ENUM_PUBINNER_1\020\010\022\023\n\017ENUM_PUBINN"
    "ER_2\020\t\022\023\n\017ENUM_PUBINNER_3\020\n*9\n\007PubEnum\022\016"
    "\n\tENUMPUB_1\020\347\007\022\016\n\tENUMPUB_2\020\351\001\022\016\n\tENUMPU"
    "B_3\020\352\001", 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gabriel/protocol/shared.proto", &protobuf_RegisterTypes);
  PubMsg::default_instance_ = new PubMsg();
  PubOuter::default_instance_ = new PubOuter();
  PubOuter_PubInner::default_instance_ = new PubOuter_PubInner();
  PubMsg::default_instance_->InitAsDefaultInstance();
  PubOuter::default_instance_->InitAsDefaultInstance();
  PubOuter_PubInner::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gabriel_2fprotocol_2fshared_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gabriel_2fprotocol_2fshared_2eproto {
  StaticDescriptorInitializer_gabriel_2fprotocol_2fshared_2eproto() {
    protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto();
  }
} static_descriptor_initializer_gabriel_2fprotocol_2fshared_2eproto_;

const ::google::protobuf::EnumDescriptor* PubEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubEnum_descriptor_;
}
bool PubEnum_IsValid(int value) {
  switch(value) {
    case 233:
    case 234:
    case 999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PubMsg::kPubidFieldNumber;
const int PubMsg::kPubnameFieldNumber;
#endif  // !_MSC_VER

PubMsg::PubMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PubMsg::InitAsDefaultInstance() {
}

PubMsg::PubMsg(const PubMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PubMsg::SharedCtor() {
  _cached_size_ = 0;
  pubid_ = 0;
  pubname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubMsg::~PubMsg() {
  SharedDtor();
}

void PubMsg::SharedDtor() {
  if (pubname_ != &::google::protobuf::internal::kEmptyString) {
    delete pubname_;
  }
  if (this != default_instance_) {
  }
}

void PubMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubMsg_descriptor_;
}

const PubMsg& PubMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto();  return *default_instance_;
}

PubMsg* PubMsg::default_instance_ = NULL;

PubMsg* PubMsg::New() const {
  return new PubMsg;
}

void PubMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pubid_ = 0;
    if (has_pubname()) {
      if (pubname_ != &::google::protobuf::internal::kEmptyString) {
        pubname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pubid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubid_)));
          set_has_pubid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pubname;
        break;
      }
      
      // optional string pubname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pubname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pubname().data(), this->pubname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PubMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pubid = 1;
  if (has_pubid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pubid(), output);
  }
  
  // optional string pubname = 2;
  if (has_pubname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pubname().data(), this->pubname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pubname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PubMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pubid = 1;
  if (has_pubid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pubid(), target);
  }
  
  // optional string pubname = 2;
  if (has_pubname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pubname().data(), this->pubname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pubname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PubMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pubid = 1;
    if (has_pubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pubid());
    }
    
    // optional string pubname = 2;
    if (has_pubname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pubname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubMsg::MergeFrom(const PubMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pubid()) {
      set_pubid(from.pubid());
    }
    if (from.has_pubname()) {
      set_pubname(from.pubname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubMsg::CopyFrom(const PubMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubMsg::IsInitialized() const {
  
  return true;
}

void PubMsg::Swap(PubMsg* other) {
  if (other != this) {
    std::swap(pubid_, other->pubid_);
    std::swap(pubname_, other->pubname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubMsg_descriptor_;
  metadata.reflection = PubMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PubOuter_PubInnerEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubOuter_PubInnerEnum_descriptor_;
}
bool PubOuter_PubInnerEnum_IsValid(int value) {
  switch(value) {
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PubOuter_PubInnerEnum PubOuter::ENUM_PUBINNER_1;
const PubOuter_PubInnerEnum PubOuter::ENUM_PUBINNER_2;
const PubOuter_PubInnerEnum PubOuter::ENUM_PUBINNER_3;
const PubOuter_PubInnerEnum PubOuter::PubInnerEnum_MIN;
const PubOuter_PubInnerEnum PubOuter::PubInnerEnum_MAX;
const int PubOuter::PubInnerEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PubOuter_PubInner::kInneridFieldNumber;
const int PubOuter_PubInner::kInnernameFieldNumber;
#endif  // !_MSC_VER

PubOuter_PubInner::PubOuter_PubInner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PubOuter_PubInner::InitAsDefaultInstance() {
}

PubOuter_PubInner::PubOuter_PubInner(const PubOuter_PubInner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PubOuter_PubInner::SharedCtor() {
  _cached_size_ = 0;
  innerid_ = 0;
  innername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubOuter_PubInner::~PubOuter_PubInner() {
  SharedDtor();
}

void PubOuter_PubInner::SharedDtor() {
  if (innername_ != &::google::protobuf::internal::kEmptyString) {
    delete innername_;
  }
  if (this != default_instance_) {
  }
}

void PubOuter_PubInner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubOuter_PubInner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubOuter_PubInner_descriptor_;
}

const PubOuter_PubInner& PubOuter_PubInner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto();  return *default_instance_;
}

PubOuter_PubInner* PubOuter_PubInner::default_instance_ = NULL;

PubOuter_PubInner* PubOuter_PubInner::New() const {
  return new PubOuter_PubInner;
}

void PubOuter_PubInner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    innerid_ = 0;
    if (has_innername()) {
      if (innername_ != &::google::protobuf::internal::kEmptyString) {
        innername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubOuter_PubInner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 innerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &innerid_)));
          set_has_innerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_innername;
        break;
      }
      
      // optional string innername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_innername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_innername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->innername().data(), this->innername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PubOuter_PubInner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 innerid = 1;
  if (has_innerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->innerid(), output);
  }
  
  // optional string innername = 2;
  if (has_innername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->innername().data(), this->innername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->innername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PubOuter_PubInner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 innerid = 1;
  if (has_innerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->innerid(), target);
  }
  
  // optional string innername = 2;
  if (has_innername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->innername().data(), this->innername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->innername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PubOuter_PubInner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 innerid = 1;
    if (has_innerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->innerid());
    }
    
    // optional string innername = 2;
    if (has_innername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->innername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubOuter_PubInner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubOuter_PubInner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubOuter_PubInner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubOuter_PubInner::MergeFrom(const PubOuter_PubInner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_innerid()) {
      set_innerid(from.innerid());
    }
    if (from.has_innername()) {
      set_innername(from.innername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubOuter_PubInner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubOuter_PubInner::CopyFrom(const PubOuter_PubInner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubOuter_PubInner::IsInitialized() const {
  
  return true;
}

void PubOuter_PubInner::Swap(PubOuter_PubInner* other) {
  if (other != this) {
    std::swap(innerid_, other->innerid_);
    std::swap(innername_, other->innername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubOuter_PubInner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubOuter_PubInner_descriptor_;
  metadata.reflection = PubOuter_PubInner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PubOuter::kOuteridFieldNumber;
const int PubOuter::kOuternameFieldNumber;
#endif  // !_MSC_VER

PubOuter::PubOuter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PubOuter::InitAsDefaultInstance() {
}

PubOuter::PubOuter(const PubOuter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PubOuter::SharedCtor() {
  _cached_size_ = 0;
  outerid_ = 0;
  outername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubOuter::~PubOuter() {
  SharedDtor();
}

void PubOuter::SharedDtor() {
  if (outername_ != &::google::protobuf::internal::kEmptyString) {
    delete outername_;
  }
  if (this != default_instance_) {
  }
}

void PubOuter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubOuter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubOuter_descriptor_;
}

const PubOuter& PubOuter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gabriel_2fprotocol_2fshared_2eproto();  return *default_instance_;
}

PubOuter* PubOuter::default_instance_ = NULL;

PubOuter* PubOuter::New() const {
  return new PubOuter;
}

void PubOuter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outerid_ = 0;
    if (has_outername()) {
      if (outername_ != &::google::protobuf::internal::kEmptyString) {
        outername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubOuter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 outerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outerid_)));
          set_has_outerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outername;
        break;
      }
      
      // optional string outername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outername().data(), this->outername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PubOuter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 outerid = 1;
  if (has_outerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outerid(), output);
  }
  
  // optional string outername = 2;
  if (has_outername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outername().data(), this->outername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->outername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PubOuter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 outerid = 1;
  if (has_outerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outerid(), target);
  }
  
  // optional string outername = 2;
  if (has_outername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outername().data(), this->outername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PubOuter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 outerid = 1;
    if (has_outerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outerid());
    }
    
    // optional string outername = 2;
    if (has_outername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubOuter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubOuter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubOuter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubOuter::MergeFrom(const PubOuter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outerid()) {
      set_outerid(from.outerid());
    }
    if (from.has_outername()) {
      set_outername(from.outername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubOuter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubOuter::CopyFrom(const PubOuter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubOuter::IsInitialized() const {
  
  return true;
}

void PubOuter::Swap(PubOuter* other) {
  if (other != this) {
    std::swap(outerid_, other->outerid_);
    std::swap(outername_, other->outername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubOuter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubOuter_descriptor_;
  metadata.reflection = PubOuter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gabriel

// @@protoc_insertion_point(global_scope)
